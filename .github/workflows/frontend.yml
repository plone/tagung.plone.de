name: Frontend CI

on:
  push:
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"
  workflow_dispatch:

env:
  IMAGE_NAME_PREFIX: ghcr.io/plone/tagung.plone.de
  IMAGE_NAME_SUFFIX: frontend
  NODE_VERSION: 22.x
  STACK_PARAM: latest
  STACK_NAME: testingtagung-plone-de
  STACK_PREFIX: testingtagung_plonede
  PUBLIC_URL: testingtagung.plone.de
  CERTRESOLVER: le-cloudflare
  STACK_FILE: devops/stacks/testingtagung.plone.de.yml
  BASICAUTH_USER: plonetagung
  BASICAUTH_PASSWORD: '$$2y$$05$$7jfejsi4CsRQpNBiorquEeuNZqDropPM4Wpox.lB0VsgIXjCk/ubC'

defaults:
  run:
    working-directory: ./frontend

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      BASE_TAG: ${{ steps.vars.outputs.BASE_TAG }}
      VOLTO_VERSION: ${{ steps.vars.outputs.VOLTO_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Compute several vars needed for the build
        id: vars
        run: |
          echo 'BASE_TAG=sha-$(git rev-parse --short HEAD)' >> $GITHUB_OUTPUT
          python3 -c 'import json; data = json.load(open("./mrs.developer.json")); print("VOLTO_VERSION=" + (data["core"].get("tag") or "latest"))' >> $GITHUB_OUTPUT
      - name: Test vars
        run: |
          echo 'BASE_TAG=${{ steps.vars.outputs.BASE_TAG }}'
          echo 'VOLTO_VERSION=${{ steps.vars.outputs.VOLTO_VERSION }}'

  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable corepack
        run: npm i -g corepack@latest && corepack enable



      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: make install

      - name: Linting
        id: lint
        if: ${{ success() || failure() }}
        run: make lint

      - name: i18n sync
        id: i18n
        if: ${{ success() || failure() }}
        run: make ci-i18n

      - name: Unit Tests
        id: unit
        if: ${{ success() || failure() }}
        run: make test

      - name: Report
        if: ${{ success() || failure() }}
        run: |
          echo '# Code Analysis' >> $GITHUB_STEP_SUMMARY
          echo '| Test | Status |' >> $GITHUB_STEP_SUMMARY
          echo '| --- | --- |' >> $GITHUB_STEP_SUMMARY
          echo '| Lint | ${{ steps.lint.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
          echo '| i18n | ${{ steps.i18n.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
          echo '| Unit Tests | ${{ steps.unit.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY 

  release:
    runs-on: ubuntu-latest
    needs:
      - meta
      - code-analysis
    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME_PREFIX }}-${{ env.IMAGE_NAME_SUFFIX }}
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 3000:3000 ${{ env.IMAGE_NAME_PREFIX }}-${{ env.IMAGE_NAME_SUFFIX }}:latest
          flavor:
            latest=false
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Report build parameters
        run: |
            echo 'Building image with...' >> $GITHUB_STEP_SUMMARY
            echo 'Volto Version: ${{ needs.meta.outputs.VOLTO_VERSION }}' >> $GITHUB_STEP_SUMMARY
            echo 'Labels:  label ${{ steps.meta.outputs.labels }}' >> $GITHUB_STEP_SUMMARY
            echo 'Tags:  label ${{ steps.meta.outputs.tags }}' >> $GITHUB_STEP_SUMMARY
            echo 'Image Prefix/Suffix: ${{ env.IMAGE_NAME_PREFIX }}-${{ env.IMAGE_NAME_SUFFIX }}' >> $GITHUB_STEP_SUMMARY
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          context: frontend/
          file: frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VOLTO_VERSION=${{ needs.meta.outputs.VOLTO_VERSION }}

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency: deploy_testing
    needs:
      - release
    runs-on: ubuntu-latest
    environment: testingtagung.plone.de
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to testingtagung.plone.de
        uses: kitconcept/docker-stack-deploy@v1.2.0
        with:
          registry: 'ghcr.io'
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOY_GHCR_READ_TOKEN }}
          remote_host: ${{ vars.DEPLOY_HOST }}
          remote_port: ${{ vars.DEPLOY_PORT }}
          remote_user: ${{ vars.DEPLOY_USER }}
          remote_private_key: ${{ secrets.DEPLOY_SSH }}
          stack_file: ${{ env.STACK_FILE }}
          stack_name: ${{ env.STACK_NAME }}
          env_file: |
            STACK_NAME=${{ env.STACK_NAME }}
            STACK_PREFIX=${{ env.STACK_PREFIX }}
            PUBLIC_URL=${{ env.PUBLIC_URL }}
            CERTRESOLVER=${{ env.CERTRESOLVER }}
            BACKEND_IMAGE=${{ env.IMAGE_NAME_PREFIX }}-backend
            FRONTEND_IMAGE=${{ env.IMAGE_NAME_PREFIX }}-frontend
          deploy_timeout: 480
